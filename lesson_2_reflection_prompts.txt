What happens when you initialize a repository? Why do you need to do it?
    When a repository is initialized a .git folder is created that begins to track
    the files within that directory and subdirectories so that the history of those
    files can be stored.  A repository does not begin to track version-control until
    it is initialized.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    Working directory contains all of the files in the repository. The staging area
    is a temporary location where files are added prior to being committed to the
    repository to be tracked.

How can you use the staging area to make sure you have one commit per logical
change?
    A single file or subset of files can be committed individually rather than
    always having to commit the entire project at a time.  This allows commits
    to be done at a very granular level comprising of only the files that were
    effected by a specific logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    Branches should be used when multiple versions of the code are needed. They
    will allow you to make big changes in the code while maintaining a working
    version.

How do the diagrams help you visualize the branch structure?
    The allow the user to easily see what commits have been made in two branches
    so that commits that belong to only one branch or the other are easily
    identifiable.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    The code represented in the latest commit of each branch is compared to the
    code represented by the most recent common commit of the two branches, and the
    code is then combined into a single commmit that is then commited and set as
    the head of the first of the two merged branches and the branches commits are
    combined.  The diagram illustrates how the two sets of code have branched, how
    and where they split, and shows visually the commits that will be combined
    into one branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?